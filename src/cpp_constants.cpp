#include "cpp_constants.hpp"


const std::set<std::string> CPPConstants::STANDARD_INCLUDES = {
    "concepts",
    "coroutine",
    "any",
    "bitset",
    "chrono",
    "compare",
    "csetjmp",
    "csignal",
    "cstdarg",
    "cstddef",
    "cstdlib",
    "ctime",
    "functional",
    "initializer_list",
    "optional",
    "source_location",
    "stacktrace",
    "tuple",
    "type_traits",
    "typeindex",
    "typeinfo",
    "utility",
    "variant",
    "version",
    "memory",
    "memory_resource",
    "new",
    "scoped_allocator",
    "cfloat",
    "cinttypes",
    "climits",
    "cstdint",
    "limits",
    "cassert",
    "cerrno",
    "exception",
    "stdexcept",
    "system_error",
    "cctype",
    "charconv",
    "cstring",
    "cuchar",
    "cwchar",
    "cwctype",
    "format",
    "string",
    "string_view",
    "array",
    "deque",
    "forward_list",
    "list",
    "map",
    "queue",
    "set",
    "span",
    "stack",
    "unordered_map",
    "unordered_set",
    "vector",
    "iterator",
    "ranges",
    "algorithm",
    "execution",
    "bit",
    "cfenv",
    "cmath",
    "complex",
    "numbers",
    "numeric",
    "random",
    "ratio",
    "valarray",
    "clocale",
    "codecvt",
    "locale",
    "cstdio",
    "fstream",
    "iomanip",
    "ios",
    "iosfwd",
    "iostream",
    "istream",
    "ostream",
    "spanstream",
    "sstream",
    "streambuf",
    "strstream",
    "syncstream",
    "filesystem",
    "regex",
    "atomic",
    "barrier",
    "condition_variable",
    "future",
    "latch",
    "mutex",
    "semaphore",
    "shared_mutex",
    "stop_token",
    "thread",
    "cstdlib",
    "stdlib.h",
    "assert.h",
    "cassert",
    "ctype.h",
    "cctype",
    "errno.h",
    "cerrno",
    "fenv.h",
    "cfenv",
    "float.h",
    "cfloat",
    "inttypes.h",
    "cinttypes",
    "limits.h",
    "climits",
    "locale.h",
    "clocale",
    "math.h",
    "cmath",
    "setjmp.h",
    "csetjmp",
    "signal.h",
    "csignal",
    "stdarg.h",
    "cstdarg",
    "stddef.h",
    "cstddef",
    "stdint.h",
    "cstdint",
    "stdio.h",
    "cstdio",
    "stdlib.h",
    "cstdlib",
    "string.h",
    "cstring",
    "time.h",
    "ctime",
    "uchar.h",
    "cuchar",
    "wchar.h",
    "cwchar",
    "wctype.h",
    "cwctype",
    "stdatomic.h",
    "cstdatomic",
    "stdatomic.h",
    "complex.h",
    "ccomplex",
    "tgmath.h",
    "ctgmath",
    "ccomplex",
    "complex",
    "complex.h",
    "complex",
    "ctgmath",
    "complex",
    "cmath",
    "tgmath.h",
    "complex",
    "cmath",
    "ciso646",
    "cstdalign",
    "cstdbool",
    "ciso646",
    "cstdalign",
    "cstdbool",
    "iso646.h",
    "stdalign.h",
    "stdbool.h",
    "stdatomic.h",
    "stdnoreturn.h",
    "threads.h" 
};


const std::set<std::string> CPPConstants::KEYWORDS = {
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "bool",
    "break",
    "case",
    "catch",
    "char",
    "char8_t ",
    "char16_t",
    "char32_t",
    "class",
    "compl",
    "concept ",
    "const",
    "consteval ",
    "constexpr",
    "constinit ",
    "const_cast",
    "continue",
    "co_await ",
    "co_return ",
    "co_yield ",
    "decltype",
    "default",
    "delete",
    "do",
    "double",
    "dynamic_cast",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "float",
    "for",
    "friend",
    "goto",
    "if",
    "inline",
    "int",
    "long",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "private",
    "protected",
    "public",
    "reflexpr",
    "register",
    "reinterpret_cast",
    "requires ",
    "return",
    "short",
    "signed",
    "sizeof",
    "static",
    "static_assert",
    "static_cast",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "unsigned",
    "using",
    "virtual",
    "void",
    "volatile",
    "wchar_t",
    "while",
    "xor",
    "xor_eq ",
    "final",
    "override",
    "transaction_safe",
    "transaction_safe_dynamic",
    "import",
    "module"
};

const std::set<std::string> CPPConstants::PREPROCESSOR_DIRECTIVES = {
    "if",
    "elif",
    "else",
    "endif",
    "ifdef",
    "ifndef",
    "define",
    "undef",
    "include",
    "line",
    "error",
    "pragma",
    "defined",
    "__has_include",
    "__has_cpp_attribute",
    "export",
    "import",
    "module",
    "_Pragma"
};